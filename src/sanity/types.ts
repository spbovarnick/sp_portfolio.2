/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BgColor = {
  _id: string;
  _type: "bgColor";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hexCode?: Color;
};

export type Tagline = {
  _id: string;
  _type: "tagline";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  copy?: string;
};

export type Portfolio = {
  _id: string;
  _type: "portfolio";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  projectName?: string;
  photos?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  orderRank?: string;
  projectLocation?: string;
  role?: string;
  contractee?: string;
  photoCredit?: Array<{
    photogName?: string;
    photogUrl?: string;
    _key: string;
  }>;
  projectType?: string;
};

export type InfoPage = {
  _id: string;
  _type: "infoPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  portrait?: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    credit?: string;
    creditUrl?: string;
    _type: "image";
  };
  bioBlurb?: string;
  previousProjects?: Array<{
    projectName?: string;
    projectCity?: string;
    studio?: string;
    _key: string;
  }>;
  pressContact?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Contact = {
  _id: string;
  _type: "contact";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  emailAddy?: string;
  instagram?: string;
  location?: string;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Slug | BgColor | Tagline | Portfolio | InfoPage | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Contact | Color | RgbaColor | HsvaColor | HslaColor;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/app/lib/queries.ts
// Variable: portfolioQuery
// Query: *[_type == "portfolio"]|order(orderRank){    _id,    orderRank,    projectName,    photoCredit,    projectLocation,    photos[]{      asset ->,      hotspot,      crop    },    projectType,  }
export type PortfolioQueryResult = Array<{
  _id: string;
  orderRank: string | null;
  projectName: string | null;
  photoCredit: Array<{
    photogName?: string;
    photogUrl?: string;
    _key: string;
  }> | null;
  projectLocation: string | null;
  photos: Array<{
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  }> | null;
  projectType: string | null;
}>;
// Variable: taglineQuery
// Query: *[_type == 'tagline'][0]{    copy,  }
export type TaglineQueryResult = {
  copy: string | null;
} | null;
// Variable: contactQuery
// Query: *[_type == 'contact'][0]{    emailAddy,    instagram,    location,  }
export type ContactQueryResult = {
  emailAddy: string | null;
  instagram: string | null;
  location: string | null;
} | null;
// Variable: infoPageQuery
// Query: *[_type == 'infoPage'][0]{    portrait{      credit,      creditUrl,      asset ->,      hotspot,      crop    },    bioBlurb,    previousProjects[],    pressContact,  }
export type InfoPageQueryResult = {
  portrait: {
    credit: string | null;
    creditUrl: string | null;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    };
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
  bioBlurb: string | null;
  previousProjects: Array<{
    projectName?: string;
    projectCity?: string;
    studio?: string;
    _key: string;
  }> | null;
  pressContact: string | null;
} | null;
// Variable: bgColorQuery
// Query: *[_type == 'bgColor'][0]
export type BgColorQueryResult = {
  _id: string;
  _type: "bgColor";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hexCode?: Color;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"portfolio\"]|order(orderRank){\n    _id,\n    orderRank,\n    projectName,\n    photoCredit,\n    projectLocation,\n    photos[]{\n      asset ->,\n      hotspot,\n      crop\n    },\n    projectType,\n  }": PortfolioQueryResult;
    "*[_type == 'tagline'][0]{\n    copy,\n  }": TaglineQueryResult;
    "*[_type == 'contact'][0]{\n    emailAddy,\n    instagram,\n    location,\n  }": ContactQueryResult;
    "*[_type == 'infoPage'][0]{\n    portrait{\n      credit,\n      creditUrl,\n      asset ->,\n      hotspot,\n      crop\n    },\n    bioBlurb,\n    previousProjects[],\n    pressContact,\n  }": InfoPageQueryResult;
    "*[_type == 'bgColor'][0]": BgColorQueryResult;
  }
}
